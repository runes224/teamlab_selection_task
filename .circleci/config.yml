version: 2
jobs:
  build:
    docker:
      - image: circleci/ruby:2.6.5-node
        # 環境変数の定義
        environment:
          RAILS_ENV: test
          DATABASE_HOSTNAME: '127.0.0.1'
          TZ: UTC
      - image: circleci/mysql:5.7
        environment:
          TZ: UTC
    steps:
      - checkout

      # https://discuss.circleci.com/t/using-bundler-2-0-during-ci-fails/27411/3
      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler
      - run:
          name: Update sources list
          command: sudo apt-get update

      - run:
          name: Install MySQL client
          command: |
            sudo apt-get install default-mysql-client
      - restore_cache:
          keys:
            - bundle-cache-{{ checksum "Gemfile.lock" }}
            - bundle-cache-
      - run:
          name: bundle install
          command: bundle check --path=vendor/bundle || bundle install --path=vendor/bundle --jobs=4 --retry=3
      # bundle installされたものcacheする
      - save_cache:
          key: bundle-cache-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle
      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:3306 -timeout 1m

      - run:
          name: setup db
          command: bundle exec rails db:create db:migrate

      - run:
          name: Run Rspec
          command: |
            mkdir ~/rspec
            bundle exec rspec --profile 10 \
                            --format progress --format RspecJunitFormatter -o ~/rspec/rspec.xml
          when: always
      - store_test_results:
          path: ~/rspec

  # EC2にSSH接続し、デプロイを実行
  deploy:
    machine:
      image: circleci/classic:edge
    steps:
      - checkout
      # CircleCIに登録した秘密鍵を呼び出す。
      - add_ssh_keys:
    commands:
      - sh script/deploy_ec2.sh

# テストが成功した場合のみ、deployを実行するようにします。
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          # masterブランチがpushされた場合のみdeployするようにする。
          filters:
            branches:
              only: master